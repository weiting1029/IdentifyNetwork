function [obj_GCV,obj_p1] = GCV_LASSO(obj_fun,p1_can,N,T,X,Y)

% function dgp_Y = func_gnr_dgp(beta,gamma,rho,X,network,Err,Y)
% %     [T,N] = size(Y);
%     I = eye(N);
%     for i = 1:T
%         A = I-rho*network;
%         B = beta*X(i,:)'+network*gamma*X(i,:)'+Err(i,:)';
% %     B = B';
%         Y(i,:) = linsolve(A,B)';    
%     end
%     dgp_Y = Y;
% end
    obj_GCV = 100000;
    obj_p1 = p1_can(1);
    for i = 1:length(p1_can)
        p1 = p1_can(i);
        x_initial(1:end-3) = zeros([N*(N-2),1]);
        x_initial(end-2:end)= 0;
        x_initial_slack = [x_initial(1:end-3);x_initial(1:end-3);x_initial(end-2:end)];
        f_min_gmm_slack = @(x)func_gmm_lasso_stage_one_slack(x,Y,X,p1);
        [x_gmm_slack, obj_gmm_slack] = func_min_pen_obj_slack(f_min_gmm_slack,x_initial_slack,N);
%     estimate_rho = x_gmm_slack(end-2);
%     estimate_gamma = x_gmm_slack(end-1);
%     estimate_beta = x_gmm_slack(end);
% %     estimate_scalar_slack = x_gmm_slack(end-2:end);
        estimate_wlist_slack = x_gmm_slack(1:N*(N-2));
%     estimate_network_slack= func_reconstruct(estimate_wlist_slack,N);
        estimate_N = nnz(estimate_wlist_slack);
%     I = eye(N);
%     estimate_Y = zeros([T,N]);
%     for i = 1:T
%         A = I - estimate_rho*estimate_network_slack;
%         B = estimate_beta*X(i,:)'+estimate_network_slack*X(i,:)';
%         estimate_Y(i,:) = linsolve(A,B)';
%     end
        can_gcv_function = log10(obj_gmm_slack)+estimate_N*log10(T)/T;
    end
    if (can_gcv_function<=obj_GCV)
        obj_GCV = can_gcv_function;
        obj_
    end
        
        
        
        

    
    
end 